# Financial Management Application GraphQL Schema
# 
# This schema defines the GraphQL API for the financial management application.
# Note that while the underlying implementation uses Decimal types for precision,
# GraphQL represents these values as Float type.

# Client with markup rate (stored as Decimal in DB)
type Client {
  id: ID!
  name: String!
  markup_rate: Float!
}

# Supplier entity
type Supplier {
  id: ID!
  name: String!
}

# Materials invoice with base amount (stored as Decimal in DB)
type MaterialsInvoice {
  id: ID!
  client: Client!
  supplier: Supplier!
  base_amount: Float!
  status: String!
  transaction: Transaction
  debts: [Debt!]
}

# Transaction with precise amount (stored as Decimal in DB)
type Transaction {
  id: ID!
  invoice: MaterialsInvoice!
  amount: Float!
}

# Debt record for client or supplier
type Debt {
  id: ID!
  invoice: MaterialsInvoice!
  party: String!
  amount: Float!
}

# Queries available in the API
type Query {
  client(id: ID!): Client
  clients: [Client!]!
  supplier(id: ID!): Supplier
  suppliers: [Supplier!]!
  invoice(id: ID!): MaterialsInvoice
  invoices: [MaterialsInvoice!]!
}

# Input for creating a materials invoice
input CreateMaterialsInvoiceInput {
  clientId: ID!
  supplierId: ID!
  invoiceDate: String!
  baseAmount: Float!
}

# Response for invoice creation
type CreateMaterialsInvoicePayload {
  invoice: MaterialsInvoice
}

# Mutations available in the API
type Mutation {
  createMaterialsInvoice(input: CreateMaterialsInvoiceInput!): CreateMaterialsInvoicePayload
} 