
    interface Node {
        id: ID!
    }

    type PageInfo {
        hasNextPage: Boolean!
        hasPreviousPage: Boolean!
        startCursor: String
        endCursor: String
    }

    type Query {
        node(id: ID!): Node
        clients(first: Int, after: String): ClientConnection!
        suppliers(first: Int, after: String): SupplierConnection!
        invoices(first: Int, after: String): MaterialsInvoiceConnection!
        transactions(first: Int, after: String): TransactionConnection!
        debts(first: Int, after: String): DebtConnection!
        client(id: ID!): Client
        supplier(id: ID!): Supplier
        invoice(id: ID!): MaterialsInvoice
        transaction(id: ID!): Transaction
        debt(id: ID!): Debt
    }
    
    type Mutation {
        createMaterialsInvoice(
            clientId: ID!
            supplierId: ID!
            invoiceDate: String!
            baseAmount: Float!
            status: String
        ): MaterialsInvoicePayload!
    }
    
    type MaterialsInvoicePayload {
        invoice: MaterialsInvoice
        errors: [String]
    }
    
    type ClientEdge {
        node: Client!
        cursor: String!
    }

    type ClientConnection {
        edges: [ClientEdge]
        pageInfo: PageInfo!
    }
    
    type Client implements Node {
        id: ID!
        name: String!
        markup_rate: Float!
        invoices(first: Int, after: String): MaterialsInvoiceConnection!
    }
    
    type SupplierEdge {
        node: Supplier!
        cursor: String!
    }

    type SupplierConnection {
        edges: [SupplierEdge]
        pageInfo: PageInfo!
    }
    
    type Supplier implements Node {
        id: ID!
        name: String!
        invoices(first: Int, after: String): MaterialsInvoiceConnection!
    }
    
    type MaterialsInvoiceEdge {
        node: MaterialsInvoice!
        cursor: String!
    }

    type MaterialsInvoiceConnection {
        edges: [MaterialsInvoiceEdge]
        pageInfo: PageInfo!
    }
    
    type MaterialsInvoice implements Node {
        id: ID!
        client: Client!
        supplier: Supplier!
        invoice_date: String!
        base_amount: Float!
        status: String!
        transaction: Transaction
        debts(first: Int, after: String): DebtConnection!
    }
    
    type TransactionEdge {
        node: Transaction!
        cursor: String!
    }

    type TransactionConnection {
        edges: [TransactionEdge]
        pageInfo: PageInfo!
    }
    
    type Transaction implements Node {
        id: ID!
        invoice: MaterialsInvoice!
        transaction_date: String!
        amount: Float!
    }
    
    type DebtEdge {
        node: Debt!
        cursor: String!
    }

    type DebtConnection {
        edges: [DebtEdge]
        pageInfo: PageInfo!
    }
    
    type Debt implements Node {
        id: ID!
        invoice: MaterialsInvoice!
        party: String!
        amount: Float!
        created_date: String!
    }
